// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "forge-std/Test.sol";
import "../src/ERC721Voucher.sol";

contract ERC721VoucherTest is Test {
    ERC721Voucher private voucher;

    address public constant alice = address(1);
    address public constant bob = address(2);
    address public constant charlie = address(3);

    address public constant tokenAddress =
        0x8d04a8c79cEB0889Bdd12acdF3Fa9D207eD3Ff63; // Blitmap
    uint256 public constant tokenId = 613; // "Say What Edition" on sale for 15 ETH
    string public constant reservoirCalldata =
        "0x9a3adc080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000050000000000000000000000008d04a8c79ceb0889bdd12acdf3fa9d207ed3ff630000000000000000000000000000000000000000000000000000000000000094000000000000000000000000d17d1bcde2a28aade2b3b5012f93b8b079d0e86b00000000000000000000000060a363530ec7db4fe74f5ebe62c337fdca8efe0f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005a4e7acab24000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000005800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d17d1bcde2a28aade2b3b5012f93b8b079d0e86b00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000046000000000000000000000000000000000000000000000000000000000000004e000000000000000000000000060a363530ec7db4fe74f5ebe62c337fdca8efe0f000000000000000000000000004c00500000ad104d7dbd00e3ae0a5c00560c000000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000062ccd2320000000000000000000000000000000000000000000000000000000062f5b0b2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000eca85ae3788edc0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f00000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000008d04a8c79ceb0889bdd12acdf3fa9d207ed3ffa77aabd007800000000000000000000000000000000000000000000000000043a77aabd007800000000000000000000000000060a363530ec7db4fe74f5ebe62c337fdca8efe0f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001bc16d674ec800000000000000000000000000000000000000000000000000001bc16d674ec80000000000000000000000000008de9c5a032463c561423387a9648c5c7bcc5bc900000000000000000000000000000000000000000000000000000000000000041f451fe0f333a99484126af520e11957d95dcb5cbff9f3b7ccd12286d1ba020ad6d425c535f28acb0cc419fbf96c3046b5733f033b7a23c0cbda653ea8e2f1ff41b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    // Contract events, repeated because foundry requires this?
    event VoucherCreated(
        uint256 indexed voucherId,
        address indexed sender,
        address indexed recipient,
        address token,
        uint256 limit
    );
    event VoucherRevoked(uint256 indexed voucherId);
    event VoucherRedeemed(
        uint256 indexed voucherId,
        uint256 spent,
        uint256 tokenId
    );

    function setUp() public {
        voucher = new ERC721Voucher();
    }

    function testCreateVoucher() public {
        vm.startPrank(alice);
        deal(alice, 2e18);

        vm.expectEmit(false, false, false, true, address(voucher));
        emit VoucherCreated(0, alice, bob, tokenAddress, 1e18);
        voucher.createVoucher{value: 1 ether}(bob, tokenAddress);
    }

    function testRedeemVoucher() public {
        vm.startPrank(alice);
        deal(alice, 2e18);
        voucher.createVoucher{value: 1 ether}(bob, tokenAddress);
        vm.stopPrank();

        vm.startPrank(bob);
        // voucher.redeemVoucher(0, tokenId);
    }
}
