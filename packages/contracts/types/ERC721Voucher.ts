/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface ERC721VoucherInterface extends utils.Interface {
  functions: {
    "createVoucher(address,address)": FunctionFragment;
    "redeemVoucher(uint256,uint256)": FunctionFragment;
    "revokeVoucher(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "createVoucher" | "redeemVoucher" | "revokeVoucher"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createVoucher",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemVoucher",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeVoucher",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "createVoucher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemVoucher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeVoucher",
    data: BytesLike
  ): Result;

  events: {
    "VoucherCreated(uint256,address,address,address,uint256)": EventFragment;
    "VoucherRedeemed(uint256,uint256,uint256)": EventFragment;
    "VoucherRevoked(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "VoucherCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoucherRedeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoucherRevoked"): EventFragment;
}

export interface VoucherCreatedEventObject {
  voucherId: BigNumber;
  sender: string;
  recipient: string;
  token: string;
  limit: BigNumber;
}
export type VoucherCreatedEvent = TypedEvent<
  [BigNumber, string, string, string, BigNumber],
  VoucherCreatedEventObject
>;

export type VoucherCreatedEventFilter = TypedEventFilter<VoucherCreatedEvent>;

export interface VoucherRedeemedEventObject {
  voucherId: BigNumber;
  spent: BigNumber;
  tokenId: BigNumber;
}
export type VoucherRedeemedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  VoucherRedeemedEventObject
>;

export type VoucherRedeemedEventFilter = TypedEventFilter<VoucherRedeemedEvent>;

export interface VoucherRevokedEventObject {
  voucherId: BigNumber;
}
export type VoucherRevokedEvent = TypedEvent<
  [BigNumber],
  VoucherRevokedEventObject
>;

export type VoucherRevokedEventFilter = TypedEventFilter<VoucherRevokedEvent>;

export interface ERC721Voucher extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ERC721VoucherInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createVoucher(
      recipient: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemVoucher(
      _voucherId: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeVoucher(
      _voucherId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  createVoucher(
    recipient: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemVoucher(
    _voucherId: PromiseOrValue<BigNumberish>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeVoucher(
    _voucherId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createVoucher(
      recipient: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemVoucher(
      _voucherId: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeVoucher(
      _voucherId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "VoucherCreated(uint256,address,address,address,uint256)"(
      voucherId?: PromiseOrValue<BigNumberish> | null,
      sender?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      token?: null,
      limit?: null
    ): VoucherCreatedEventFilter;
    VoucherCreated(
      voucherId?: PromiseOrValue<BigNumberish> | null,
      sender?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      token?: null,
      limit?: null
    ): VoucherCreatedEventFilter;

    "VoucherRedeemed(uint256,uint256,uint256)"(
      voucherId?: PromiseOrValue<BigNumberish> | null,
      spent?: null,
      tokenId?: null
    ): VoucherRedeemedEventFilter;
    VoucherRedeemed(
      voucherId?: PromiseOrValue<BigNumberish> | null,
      spent?: null,
      tokenId?: null
    ): VoucherRedeemedEventFilter;

    "VoucherRevoked(uint256)"(
      voucherId?: PromiseOrValue<BigNumberish> | null
    ): VoucherRevokedEventFilter;
    VoucherRevoked(
      voucherId?: PromiseOrValue<BigNumberish> | null
    ): VoucherRevokedEventFilter;
  };

  estimateGas: {
    createVoucher(
      recipient: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemVoucher(
      _voucherId: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeVoucher(
      _voucherId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createVoucher(
      recipient: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemVoucher(
      _voucherId: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeVoucher(
      _voucherId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
